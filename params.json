{"name":"re2","body":"[![Build Status](https://secure.travis-ci.org/mudge/re2.png?branch=master)](http://travis-ci.org/mudge/re2)\r\n\r\n### Installation\r\n\r\nYou will need [re2][] installed as well as a C++ compiler such as [gcc][] (on Debian and Ubuntu, this is provided by the [build-essential][] package). If you are using Mac OS X, I recommend installing re2 with [Homebrew][] by running the following:\r\n\r\n    $ brew install --HEAD re2\r\n\r\nIf you are using Debian, you can install the [libre2-dev][] package like so:\r\n\r\n    $ sudo apt-get install libre2-dev\r\n\r\nIf you are using a packaged Ruby distribution, make sure you also have the Ruby header files installed such as those provided by the [ruby-dev][] package on Debian and Ubuntu.\r\n\r\nYou can then install the library via RubyGems with `gem install re2` or `gem install re2 -- --with-re2-dir=/opt/local/re2` if re2 is not installed in the default location of `/usr/local/`.\r\n\r\n### Documentation\r\n\r\nFull documentation automatically generated from the latest version is available at <http://rubydoc.info/github/mudge/re2>.\r\n\r\nBear in mind that re2's regular expression syntax differs from PCRE, see the [official syntax page][] for more details.\r\n\r\n### Usage\r\n\r\nYou can use re2 as a mostly drop-in replacement for Ruby's own [Regexp][] and [MatchData][] classes:\r\n\r\n```console\r\n$ irb -rubygems\r\n> require 're2'\r\n> r = RE2::Regexp.new('w(\\d)(\\d+)')\r\n=> #<RE2::Regexp /w(\\d)(\\d+)/>\r\n> m = r.match(\"w1234\")\r\n=> #<RE2::MatchData \"w1234\" 1:\"1\" 2:\"234\">\r\n> m[1]\r\n=> \"1\"\r\n> m.string\r\n=> \"w1234\"\r\n> r =~ \"w1234\"\r\n=> true\r\n> r !~ \"bob\"\r\n=> true\r\n> r.match(\"bob\")\r\n=> nil\r\n```\r\n\r\nAs `RE2::Regexp.new` (or `RE2::Regexp.compile`) can be quite verbose, a helper method has been defined against `Kernel` so you can use a shorter version to create regular expressions:\r\n\r\n```console\r\n> RE2('(\\d+)')\r\n=> #<RE2::Regexp /(\\d+)/>\r\n```\r\n\r\nNote the use of *single quotes* as double quotes will interpret `\\d` as `d` as in the following example:\r\n\r\n```console\r\n> RE2(\"(\\d+)\")\r\n=> #<RE2::Regexp /(d+)/>\r\n```\r\n\r\nAs of 0.3.0, you can use named groups:\r\n\r\n```console\r\n> r = RE2::Regexp.new('(?P<name>\\w+) (?P<age>\\d+)')\r\n=> #<RE2::Regexp /(?P<name>\\w+) (?P<age>\\d+)/>\r\n> m = r.match(\"Bob 40\")\r\n=> #<RE2::MatchData \"Bob 40\" 1:\"Bob\" 2:\"40\">\r\n> m[:name]\r\n=> \"Bob\"\r\n> m[\"age\"]\r\n=> \"40\"\r\n```\r\n\r\nAs of 0.4.0, you can mix `RE2::String` into strings to provide helpers from the opposite direction:\r\n\r\n```console\r\n> require \"re2/string\"\r\n> string = \"My name is Robert Paulson\"\r\n=> \"My name is Robert Paulson\"\r\n> string.extend(RE2::String)\r\n=> \"My name is Robert Paulson\"\r\n> string.re2_sub(\"Robert\", \"Dave\")\r\n=> \"My name is Dave Paulson\"\r\n> string.re2_gsub(\"a\", \"e\")\r\n=> \"My neme is Deve Peulson\"\r\n> string.re2_match('D(\\S+)')\r\n=> #<RE2::MatchData \"Deve\" 1:\"eve\">\r\n> string.re2_escape\r\n=> \"My\\\\ neme\\\\ is\\\\ Deve\\\\ Peulson\"\r\n```\r\n\r\nIf you want these available to all strings, you can reopen `String` like so:\r\n\r\n```ruby\r\nclass String\r\n  include RE2::String\r\nend\r\n```\r\n\r\n### Features\r\n\r\n* Pre-compiling regular expressions with [`RE2::Regexp.new(re)`](http://code.google.com/p/re2/source/browse/re2/re2.h#96), `RE2::Regexp.compile(re)` or `RE2(re)` (including specifying options, e.g. `RE2::Regexp.new(\"pattern\", :case_sensitive => false)`\r\n\r\n* Extracting matches with `re2.match(text)` (and an exact number of matches with `re2.match(text, number_of_matches)` such as `re2.match(\"123-234\", 2)`)\r\n\r\n* Extracting matches by name (both with strings and symbols)\r\n\r\n* Checking for matches with `re2 =~ text`, `re2 === text` (for use in `case` statements) and `re2 !~ text`\r\n\r\n* Checking regular expression compilation with `re2.ok?`, `re2.error` and `re2.error_arg`\r\n\r\n* Checking regular expression \"cost\" with `re2.program_size`\r\n\r\n* Checking the options for an expression with `re2.options` or individually with `re2.case_sensitive?`\r\n\r\n* Performing in-place replacement with [`RE2.Replace(str, pattern, replace)`](http://code.google.com/p/re2/source/browse/re2/re2.h#335)\r\n\r\n* Performing in-place global replacement with [`RE2.GlobalReplace(str, pattern, replace)`](http://code.google.com/p/re2/source/browse/re2/re2.h#352)\r\n\r\n* Escaping regular expressions with [`RE2::Regexp.escape(unquoted)`](http://code.google.com/p/re2/source/browse/re2/re2.h#377), `RE2::Regexp.quote(unquoted)` or `RE2.QuoteMeta(unquoted)`\r\n\r\n### Contact\r\n\r\nAll feedback should go to the mailing list: <mailto:ruby.re2@librelist.com>\r\n\r\n  [re2]: http://code.google.com/p/re2/\r\n  [gcc]: http://gcc.gnu.org/\r\n  [ruby-dev]: http://packages.debian.org/ruby-dev\r\n  [build-essential]: http://packages.debian.org/build-essential\r\n  [Regexp]: http://ruby-doc.org/core/classes/Regexp.html\r\n  [MatchData]: http://ruby-doc.org/core/classes/MatchData.html \r\n  [Homebrew]: http://mxcl.github.com/homebrew\r\n  [libre2-dev]: http://packages.debian.org/search?keywords=libre2-dev\r\n  [official syntax page]: http://code.google.com/p/re2/wiki/Syntax","tagline":"Ruby bindings to re2, an \"efficient, principled regular expression library\".","google":"var _gaq = [['_setAccount', 'UA-1804081-1'], ['_trackPageview']]; (function() { var ga = document.createElement('script'); ga.async = true; ga.src = '//www.google-analytics.com/ga.js'; document.firstChild.appendChild(ga); }());","note":"Don't delete this file! It's used internally to help with page regeneration."}